name: Deploy to Digital Ocean Production

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.FRONTEND_IMAGE_TAG }}
          file: Dockerfile.frontend

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.BACKEND_IMAGE_TAG }}
          file: Dockerfile.backend

      - name: Save DigitalOcean kubeconfig
        run: |
          doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}

      - name: Create k8s namespace
        run: |
          kubectl apply -f k8s/frontend/namespace-setup.yaml
          kubectl apply -f k8s/backend/namespace-setup.yaml

      - name: Create and Apply Frontend Secrets
        env:
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
        run: |
          cat <<EOF > k8s/frontend/secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: nexusgear-frontend-secret
            namespace: nexusgear-frontend-ns
          type: Opaque
          data:
            REACT_APP_API_BASE_URL: $(echo -n "$REACT_APP_API_BASE_URL" | base64 -w 0)
          EOF
          kubectl apply -f k8s/frontend/secret.yaml
          rm k8s/frontend/secret.yaml

      - name: Create and Apply Backend Secrets
        env:
          ORIGIN_URL: ${{ secrets.ORIGIN_URL }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          PAYMENT_SUCCESS_URL: ${{ secrets.PAYMENT_SUCCESS_URL }}
          PAYMENT_FAIL_URL: ${{ secrets.PAYMENT_FAIL_URL }}
          ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_ORIGIN_URL: ${{ secrets.STRIPE_ORIGIN_URL }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          cat <<EOF > k8s/backend/secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: nexusgear-backend-secret
            namespace: nexusgear-backend-ns
          type: Opaque
          data:
            ORIGIN_URL: $(echo -n "$ORIGIN_URL" | base64 -w 0)
            ACCESS_TOKEN_SECRET: $(echo -n "$ACCESS_TOKEN_SECRET" | base64 -w 0)
            REFRESH_TOKEN_SECRET: $(echo -n "$REFRESH_TOKEN_SECRET" | base64 -w 0)
            MONGO_URI: $(echo -n "$MONGO_URI" | base64 -w 0)
            PAYMENT_SUCCESS_URL: $(echo -n "$PAYMENT_SUCCESS_URL" | base64 -w 0)
            PAYMENT_FAIL_URL: $(echo -n "$PAYMENT_FAIL_URL" | base64 -w 0)
            ENCRYPT_KEY: $(echo -n "$ENCRYPT_KEY" | base64 -w 0)
            STRIPE_SECRET_KEY: $(echo -n "$STRIPE_SECRET_KEY" | base64 -w 0)
            STRIPE_ORIGIN_URL: $(echo -n "$STRIPE_ORIGIN_URL" | base64 -w 0)
            STRIPE_WEBHOOK_SECRET: $(echo -n "$STRIPE_WEBHOOK_SECRET" | base64 -w 0)
          EOF
          kubectl apply -f k8s/backend/secret.yaml
          rm k8s/backend/secret.yaml

      - name: Ingress and TLS Certificate Setup
        run: |
          kubectl apply -f k8s/ingress-rules.yaml
          kubectl apply -f k8s/production-issuer.yaml

      - name: Deploy and Restart Frontend to k8s
        run: |
          kubectl apply -f k8s/frontend/frontend-setup.yaml
          kubectl rollout restart deployment nexusgear-frontend-deployment -n nexusgear-frontend-ns

      - name: Deploy and Restart Backend to k8s
        run: |
          kubectl apply -f k8s/backend/backend-setup.yaml
          kubectl rollout restart deployment nexusgear-backend-deployment -n nexusgear-backend-ns